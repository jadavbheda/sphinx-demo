=================================
AutoShifts: Design 'how and why?'
=================================

Introduction
------------

This project aims to generate automatic shift vectors between old landbase (now onwards referred as source) to new landbase (now onwards referred as target).

Automatic Shift vector generation process divided mainly in following parts:

    #. Harris corner detection (subpixel.py)
        * Generate corners for the source file
        * Generate corners for the target file
        * [Optional] - Generate corners for source + target in a same out file [for better visibility]
    #. Convert source and target rasters to vector files (raster_to_vector.py)
        * Also perform line smoothing (Douglas and Peucker Algo) to reduce the number of vertices on generated polygons
    #. Edge detection (edge_detection.py)
        * So far we have 'corners' from #1 and 'polygons' from #2. Ideally, if D&P algo would have produced proper polygon, we could have started generating shift vectors using them.
            But unfortunately, polygons generated by D&P have more vertices than ideal vector representation should have.
        * So idea is to use 'corners' and 'polygons' generated from above steps. And, for every polygon find the nearby corners in a given vicinity, draw line between them.
            Using this process it should give us proper box containing given polygon. This box would be ideal ideal candidate to generate shifts.

Libraries this project uses
----------------------------
    #. OpenCV : for harris corner detection
        * OpenCV python interfaces are basically wrappers around underneath c++ libraries.
            - `Github link <https://github.com/opencv/opencv/tree/master/modules>`_
            - `Website <https://github.com/opencv>`_
        * Examples:
            - `Corner Harris Tutorial <http://docs.opencv.org/3.0-beta/doc/py_tutorials/py_feature2d/py_features_harris/py_features_harris.html>`_
            - `API Doc <http://docs.opencv.org/2.4/modules/imgproc/doc/feature_detection.html?highlight=cornerharris#cornerharris>`_

    #. Raster to vector conversion
        * `Rasterio <https://github.com/mapbox/rasterio>`_
            - Essentially a python wrapper around `GDAL <http://gdal.org/>`_
            - Used to read raster image. Potentially, can be used to write rasters.
        * `Fiona <https://github.com/Toblerity/Fiona>`_
            - Again, wrapper around GDAL and OGR.
            - Used to read and write vector file (polygons in shape file)

        * `shapely <https://github.com/Toblerity/Shapely>`_
            - Python wrapper around `GEOS <http://trac.osgeo.org/geos/>`_
            - Used to manipulate shapes (like Douglas & Peucker smoothing)

    #. Vector RTree Index
        * `rtree <https://github.com/Toblerity/rtree>`_
            - Python bindings for c++ `libspatialindex 1.7+ <https://libspatialindex.github.io/>`_
            - Used in edge_detection.py to find nearest neighbourhood [`Tutorial <http://toblerity.org/rtree/tutorial.html>`_]

    #. Project documentation
        * `Sphinx <http://www.sphinx-doc.org>`_
            - HTML and PDF documentation.

=================================
How to use this project
=================================
Once you check out the source code from the bitbucket repo, follow given below steps.
    * Go to project home folder *AutoShift*
    * Before one actually run the code, has to configure the *SourceFile, TargetFile* and *OutputFile* sections in *config/config.conf* file.
    * Run *Autoshift/main.py* file.
        - ``cd Autoshift``
        - ``python main.py``

=================================
How to generate documentations
=================================
This project uses *Sphinx* for auto doc generation. Go to project's **docs** directory.
    * ``AutoShift> cd docs``
    * ``AutoShift\docs> sphinx-quickstart`` (Modify .conf file if reqiured)
    * ``AutoShift\docs> sphinx-apidoc --force -d 4 -o source ../``
    * ``AutoShift\docs> make.bat html``

    * To generate pdf
        ``sphinx-build -b pdf source build/pdf``
    * To generate epub ebook
        ``make.bat latex``

**The HTML pages will be generated in in docs/build/html directory.**